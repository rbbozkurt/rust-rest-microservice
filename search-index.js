var searchIndex = new Map(JSON.parse('[\
["rust_rest_microservice",{"doc":"","t":"CCHHFNNNNNONNONONNNNNNNHHH","n":["dummy_data","dummy_db","get_users","main","User","borrow","borrow_mut","clone","clone_into","deserialize","email","fmt","from","id","into","name","new","serialize","to_owned","try_from","try_into","type_id","vzip","get_random_user","get_user_by_id","get_users"],"q":[[0,"rust_rest_microservice"],[4,"rust_rest_microservice::dummy_data"],[23,"rust_rest_microservice::dummy_db"],[26,"actix_web::response::responder"],[27,"std::io::error"],[28,"core::result"],[29,"serde::de"],[30,"core::fmt"],[31,"core::fmt"],[32,"core::any"],[33,"core::option"],[34,"alloc::vec"]],"d":["","","","","Represents a user with an ID, name, and email.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Returns a new <code>User</code> instance with the given ID, name, and â€¦","","","","","","","","","Returns a vector of dummy users."],"i":[0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0],"f":[0,0,[[],[[0,[1]]]],[[],[[3,[2]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[[-1,-2],2,[],[]],[-1,[[5,[4]]],6],0,[[4,7],8],[-1,-1,[]],0,[-1,-2,[],[]],0,[[9,10,10],4],[[4,-1],5,11],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]],[[],4],[9,[[13,[4]]]],[[],[[14,[4]]]]],"c":[],"p":[[10,"Responder",26],[1,"tuple"],[8,"Result",27],[5,"User",4],[6,"Result",28],[10,"Deserializer",29],[5,"Formatter",30],[8,"Result",30],[1,"i32"],[1,"str"],[10,"Serializer",31],[5,"TypeId",32],[6,"Option",33],[5,"Vec",34]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
